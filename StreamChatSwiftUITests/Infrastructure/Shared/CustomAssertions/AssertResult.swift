//
// Copyright © 2025 Stream.io Inc. All rights reserved.
//

import XCTest

/// Asserts the provided `Result` object is `.success(referenceValue)`.
///
/// - Parameters:
///   - result: The Result object under tests.
///   - referenceValue: The reference success value.
func AssertResultSuccess<T: Equatable>(
    _ result: Result<T, some Error>,
    _ referenceValue: T,
    file: StaticString = #file,
    line: UInt = #line
) {
    if case let .success(value) = result {
        XCTAssertEqual(value, referenceValue, file: file, line: line)
    } else {
        XCTFail("Expected .success, got \(result).", file: file, line: line)
    }
}

/// Asserts the provided `Result` object is `.failure(referenceError)`.
///
/// - Parameters:
///   - result: The Result object under tests.
///   - referenceError: The reference failure value.
///
/// - Warning: ⚠️ Because the `Error` type is not `Equatable`, it compares the error objects
///   based on their description generated by `String(describing:)`.
func AssertResultFailure(
    _ result: Result<some Equatable, some Error>,
    _ referenceError: Error,
    file: StaticString = #file,
    line: UInt = #line
) {
    if case let .failure(error) = result {
        XCTAssertEqual(String(describing: error), String(describing: referenceError), file: file, line: line)
    } else {
        XCTFail("Expected .failure, got \(result).", file: file, line: line)
    }
}

/// Asserts the provided `Result` object is `.failure(referenceError)`.
///
/// - Parameters:
///   - result: The Result object under tests.
///   - referenceError: The reference failure value.
func AssertResultFailure<E: Error & Equatable>(
    _ result: Result<some Any, E>,
    _ referenceError: E,
    file: StaticString = #file,
    line: UInt = #line
) {
    if case let .failure(error) = result {
        XCTAssertEqual(error, referenceError, file: file, line: line)
    } else {
        XCTFail("Expected .failure, got \(result).", file: file, line: line)
    }
}
