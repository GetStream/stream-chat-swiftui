default_platform :ios
skip_docs

require 'json'
require 'net/http'
require 'xcodeproj'
import 'Sonarfile'
import 'Allurefile'

xcode_version = ENV['XCODE_VERSION'] || '15.0'
xcode_project = 'StreamChatSwiftUI.xcodeproj'
sdk_names = ['StreamChatSwiftUI']
github_repo = ENV['GITHUB_REPOSITORY'] || 'GetStream/stream-chat-swiftui'
derived_data_path = 'derived_data'
source_packages_path = 'spm_cache'
buildcache_xcargs = 'CC=clang CPLUSPLUS=clang++ LD=clang LDPLUSPLUS=clang++'
is_localhost = !is_ci
@force_check = false

before_all do |lane|
  if is_ci
    setup_ci
    ENV['FASTLANE_XCODEBUILD_SETTINGS_TIMEOUT'] = '180'
    ENV['FASTLANE_XCODEBUILD_SETTINGS_RETRIES'] = '10'
    xcversion(version: xcode_version) unless [:publish_release, :allure_launch].include?(lane)
  end
end

after_all do |lane|
  stop_sinatra if lane == :test_e2e_mock
end

desc 'Release a new version'
lane :release do |options|
  pod_lint
  version_number = release_ios_sdk(
    version: options[:version],
    bump_type: options[:type],
    sdk_names: sdk_names,
    github_repo: github_repo
  )
  publish_release(version: version_number)
end

desc "Publish a new release to GitHub and CocoaPods"
lane :publish_release do |options|
  publish_ios_sdk(
    version: options[:version],
    sdk_names: sdk_names,
    github_repo: github_repo
  )
end

private_lane :appstore_api_key do
  @appstore_api_key ||= app_store_connect_api_key(
    key_id: 'MT3PRT8TB7',
    issuer_id: '69a6de96-0738-47e3-e053-5b8c7c11a4d1',
    key_content: ENV.fetch('APPSTORE_API_KEY', nil),
    in_house: false
  )
end

lane :pod_lint do
  pod_lib_lint(podspec: 'StreamChatSwiftUI.podspec', allow_warnings: true)
end

desc "If `readonly: true` (by default), installs all Certs and Profiles necessary for development and ad-hoc.\nIf `readonly: false`, recreates all Profiles necessary for development and ad-hoc, updates them locally and remotely."
lane :match_me do |options|
  custom_match(
    api_key: appstore_api_key,
    app_identifier: ['io.getstream.iOS.DemoAppSwiftUI'],
    readonly: options[:readonly],
    register_device: options[:register_device]
  )
end

desc 'Runs tests in Debug config'
lane :test_ui do |options|
  next unless is_check_required(sources: sources_matrix[:ui], force_check: @force_check)

  remove_snapshots if options[:record]

  update_testplan_on_ci(path: 'StreamChatSwiftUITests/Tests/StreamChatSwiftUI.xctestplan')

  scan(
    project: xcode_project,
    scheme: 'StreamChatSwiftUI',
    testplan: 'StreamChatSwiftUI',
    configuration: 'Debug',
    clean: is_localhost,
    derived_data_path: derived_data_path,
    cloned_source_packages_path: source_packages_path,
    result_bundle: true,
    devices: options[:device],
    build_for_testing: options[:build_for_testing],
    skip_build: options[:skip_build],
    number_of_retries: 1,
    xcargs: buildcache_xcargs
  )
end

lane :build_test_app_and_frameworks do
  scan(
    project: xcode_project,
    scheme: 'StreamChatSwiftUITestsApp',
    testplan: 'StreamChatSwiftUITestsApp',
    result_bundle: true,
    derived_data_path: derived_data_path,
    cloned_source_packages_path: source_packages_path,
    clean: is_localhost,
    build_for_testing: true,
    xcargs: buildcache_xcargs
  )
end

desc 'Starts Sinatra web server'
lane :start_sinatra do
  sh('bundle exec ruby sinatra.rb > sinatra_log.txt 2>&1 &')
end

desc 'Stops Sinatra web server'
lane :stop_sinatra do
  sh('lsof -t -i:4567 | xargs kill -9')
end

desc 'Runs e2e ui tests using mock server in Debug config'
lane :test_e2e_mock do |options|
  next unless is_check_required(sources: sources_matrix[:e2e], force_check: @force_check)

  start_sinatra
  prepare_simulator(device: options[:device]) if is_ci

  scan_options = {
    project: xcode_project,
    scheme: 'StreamChatSwiftUITestsApp',
    testplan: 'StreamChatSwiftUITestsApp',
    result_bundle: true,
    derived_data_path: derived_data_path,
    cloned_source_packages_path: source_packages_path,
    clean: is_localhost,
    test_without_building: options[:test_without_building],
    xcargs: buildcache_xcargs,
    devices: options[:device],
    number_of_retries: 3 # TODO: CIS-1737
  }

  if is_localhost || options[:cron]
    scan(scan_options)
  else
    parallelize_tests_on_ci(scan: scan_options, batch: options[:batch])
  end
end

private_lane :parallelize_tests_on_ci do |options|
  products_dir = File.expand_path("../#{derived_data_path}/Build/Products")
  xctestrun = Dir.glob(File.expand_path("#{products_dir}/*.xctestrun")).first
  tests = retrieve_xctest_names(xctestrun: xctestrun).values.flatten
  slice_size = (tests.size / ENV['MATRIX_SIZE'].to_f).ceil
  only_testing = []
  tests.each_slice(slice_size) { |test| only_testing << test }
  only_testing_batch = only_testing[options[:batch].to_i]

  UI.success("Tests in total: #{only_testing.flatten.size}. Running #{only_testing_batch.size} of them ⌛️")
  scan(options[:scan].merge(only_testing: only_testing_batch))
end

desc 'Builds Demo app'
lane :build_demo do |options|
  next unless is_check_required(sources: sources_matrix[:sample_apps], force_check: @force_check)

  scan(
    project: xcode_project,
    scheme: 'DemoAppSwiftUI',
    clean: is_localhost,
    derived_data_path: derived_data_path,
    cloned_source_packages_path: source_packages_path,
    build_for_testing: true,
    devices: options[:device],
    xcargs: buildcache_xcargs
  )
end

private_lane :update_testplan_on_ci do |options|
  update_testplan(path: options[:path], env_vars: { key: 'CI', value: 'TRUE' }) if is_ci
end

desc 'Run fastlane linting'
lane :rubocop do
  next unless is_check_required(sources: sources_matrix[:ruby], force_check: @force_check)

  sh('bundle exec rubocop')
end

lane :install_sim do |options|
  xcode_install_cache_dir = File.expand_path('~/Library/Caches/XcodeInstall')
  sim_dmg_path = Dir["#{xcode_install_cache_dir}/*.dmg"].first
  sim_pkg_path = Dir["#{xcode_install_cache_dir}/*.pkg"].first
  if is_localhost || sim_dmg_path.nil? || sim_pkg_path.nil?
    sh("bundle exec xcversion simulators --install='iOS #{options[:ios]}'")
  else
    sh("hdiutil attach '#{sim_dmg_path}'")
    sh("sudo installer -pkg '#{sim_pkg_path}' -target /")
    mount_point = sh("hdiutil attach '#{sim_dmg_path}' | grep Volumes | cut -f 3").strip
    sh("hdiutil detach '#{mount_point}'")
  end
end

desc 'Remove UI snapshots'
private_lane :remove_snapshots do
  Dir.glob('../StreamChatSwiftUITests/**/__Snapshots__/**/*.png').select { |file| File.delete(file) }
end

lane :sources_matrix do
  {
    e2e: ['Sources', 'StreamChatSwiftUITestsAppTests', 'StreamChatSwiftUITestsApp'],
    ui: ['Sources', 'StreamChatSwiftUITests', xcode_project],
    sample_apps: ['Sources', 'DemoAppSwiftUI', xcode_project],
    ruby: ['fastlane', 'Gemfile', 'Gemfile.lock']
  }
end

private_lane :current_branch do
  ENV['BRANCH_NAME'] || git_branch
end
