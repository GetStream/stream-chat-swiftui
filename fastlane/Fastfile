default_platform :ios
skip_docs

require 'json'
require 'net/http'
require 'xcodeproj'
import 'Sonarfile'
import 'Allurefile'

xcode_version = ENV['XCODE_VERSION'] || '14.2'
xcode_project = 'StreamChatSwiftUI.xcodeproj'
github_repo = ENV['GITHUB_REPOSITORY'] || 'GetStream/stream-chat-swiftui'

before_all do
  if is_ci
    setup_ci
    xcodes(version: xcode_version, select_for_current_build_only: true)
    ENV['FASTLANE_XCODEBUILD_SETTINGS_TIMEOUT'] = '180'
  end
end

after_all do |lane|
  stop_sinatra if lane == :test_e2e_mock
end

desc 'Release a new version'
lane :release do |options|
  ensure_git_branch(branch: 'main') # We can only release on default branch
  ensure_git_status_clean unless options[:no_ensure_clean]

  UI.user_error!('Please set GITHUB_TOKEN environment value. See https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token') if ENV['GITHUB_TOKEN'].nil?

  if options[:version].nil? # User passed a version, use it
    UI.user_error!('Please use type parameter with one of the options: type:patch, type:minor, type:major') unless ['patch', 'minor', 'major'].include?(options[:type])
    version_number = increment_version_number_in_plist(bump_type: options[:type], xcodeproj: xcode_project, target: 'StreamChatSwiftUI')
  else
    version_number = options.fetch(:version)
    increment_version_number_in_plist(version_number: version_number, xcodeproj: xcode_project, target: 'StreamChatSwiftUI')
  end

  UI.user_error!("Tag for version #{version_number} already exists!") if git_tag_exists(tag: version_number)

  changes = touch_changelog(release_version: version_number, github_repo: github_repo)

  podspec = 'StreamChatSwiftUI.podspec'
  pod_lib_lint(podspec: podspec, allow_warnings: true)
  version_bump_podspec(path: podspec, version_number: version_number)

  sh('git add -A')

  UI.user_error!('Not committing changes') unless prompt(text: 'Will commit changes. All looking good?', boolean: true)

  sh("git commit -m 'Bump #{version_number}'")
  sh("git tag #{version_number}")

  UI.user_error!('Not pushing changes') unless prompt(text: 'Will push changes. All looking good?', boolean: true)

  push_to_git_remote(tags: true)

  github_release = set_github_release(
    repository_name: github_repo,
    api_token: ENV.fetch('GITHUB_TOKEN', nil),
    name: version_number,
    tag_name: version_number,
    description: changes
  )

  pod_push(path: podspec, allow_warnings: true)

  UI.success("Successfully released #{version_number}")
  UI.success("Github release was created, please visit #{github_release['url']} to see it")
end

private_lane :appstore_api_key do
  @appstore_api_key ||= app_store_connect_api_key(
    key_id: 'MT3PRT8TB7',
    issuer_id: '69a6de96-0738-47e3-e053-5b8c7c11a4d1',
    key_content: ENV.fetch('APPSTORE_API_KEY', nil),
    in_house: false
  )
end

desc "If `readonly: true` (by default), installs all Certs and Profiles necessary for development and ad-hoc.\nIf `readonly: false`, recreates all Profiles necessary for development and ad-hoc, updates them locally and remotely."
lane :match_me do |options|
  custom_match(
    api_key: appstore_api_key,
    app_identifier: ['io.getstream.iOS.DemoAppSwiftUI'],
    readonly: options[:readonly],
    register_device: options[:register_device]
  )
end

desc 'Runs tests in Debug config'
lane :test_ui do |options|
  next unless is_check_required(sources: sources_matrix[:ui])

  remove_snapshots if options[:record]

  update_testplan_on_ci(path: 'StreamChatSwiftUITests/Tests/StreamChatSwiftUI.xctestplan')

  scan(
    project: xcode_project,
    scheme: 'StreamChatSwiftUI',
    testplan: 'StreamChatSwiftUI',
    configuration: 'Debug',
    clean: true,
    result_bundle: true,
    devices: options[:device],
    build_for_testing: options[:build_for_testing]
  )
end

desc 'Starts Sinatra web server'
lane :start_sinatra do
  sh('nohup bundle exec ruby sinatra.rb > sinatra_log.txt 2>&1 &')
end

desc 'Stops Sinatra web server'
lane :stop_sinatra do
  sh('lsof -t -i:4567 | xargs kill -9')
end

desc 'Runs e2e ui tests using mock server in Debug config'
lane :test_e2e_mock do |options|
  next unless is_check_required(sources: sources_matrix[:e2e])

  start_sinatra

  device = options[:ios] && options[:ios] != 'latest' ? "#{options[:device]} (#{options[:ios]})" : options[:device]
  prepare_simulator(device: device, reset: true) if is_ci

  scan_options = {
    project: xcode_project,
    scheme: 'StreamChatSwiftUITestsApp',
    testplan: 'StreamChatSwiftUITestsApp',
    result_bundle: true,
    devices: device,
    number_of_retries: 3 # TODO: CIS-1737
  }

  build_for_testing = is_ci && options[:cron].nil?
  scan(scan_options.merge(clean: true, build_for_testing: build_for_testing))

  if build_for_testing
    parallelize_tests_on_ci(
      scan: scan_options,
      derived_data: lane_context[SharedValues::SCAN_DERIVED_DATA_PATH],
      batch: options[:batch]
    )
  end
end

private_lane :parallelize_tests_on_ci do |options|
  xctestrun = Dir.glob("#{options[:derived_data]}/Build/Products/*.xctestrun").first
  tests = retrieve_xctest_names(xctestrun: xctestrun).values.flatten
  slice_size = (tests.size / ENV['MATRIX_SIZE'].to_f).ceil
  only_testing = []
  tests.each_slice(slice_size) { |test| only_testing << test }
  only_testing_batch = only_testing[options[:batch].to_i]

  UI.success("Tests in total: #{only_testing.flatten.size}. Running #{only_testing_batch.size} of them ⌛️")
  scan(
    options[:scan].merge(
      test_without_building: true,
      derived_data_path: options[:derived_data],
      only_testing: only_testing_batch
    )
  )
end

desc 'Builds Demo app'
lane :build_demo do |options|
  next unless is_check_required(sources: sources_matrix[:sample_apps])

  scan(
    project: xcode_project,
    scheme: 'DemoAppSwiftUI',
    clean: true,
    build_for_testing: true,
    devices: options[:device]
  )
end

desc 'Test SPM Integration'
lane :spm_integration do |options|
  build_app(
    project: 'Integration/SPM/SwiftPackageManager.xcodeproj',
    scheme: 'SwiftPackageManager',
    skip_package_ipa: true,
    skip_archive: true,
    destination: 'generic/platform=iOS Simulator'
  )
end

desc 'Test CocoaPods Integration'
lane :cocoapods_integration do
  cocoapods(
    clean_install: true,
    podfile: 'Integration/CocoaPods/'
  )

  build_app(
    workspace: 'Integration/CocoaPods/CocoaPods.xcworkspace',
    scheme: 'CocoaPods',
    skip_package_ipa: true,
    skip_archive: true,
    clean: true,
    destination: 'generic/platform=iOS Simulator'
  )
end

private_lane :update_testplan_on_ci do |options|
  update_testplan(path: options[:path], env_vars: { key: 'CI', value: 'TRUE' }) if is_ci
end

desc 'Run fastlane linting'
lane :rubocop do
  next unless is_check_required(sources: sources_matrix[:ruby])

  sh('bundle exec rubocop')
end

desc 'Remove UI snapshots'
private_lane :remove_snapshots do
  Dir.glob('../StreamChatSwiftUITests/**/__Snapshots__/**/*.png').select { |file| File.delete(file) }
end

lane :sources_matrix do
  {
    e2e: ['Sources', 'StreamChatSwiftUITestsAppTests', 'StreamChatSwiftUITestsApp'],
    ui: ['Sources', 'StreamChatSwiftUITests', xcode_project],
    sample_apps: ['Sources', 'DemoAppSwiftUI', xcode_project],
    ruby: ['fastlane']
  }
end

private_lane :current_branch do
  ENV['BRANCH_NAME'] || git_branch
end
