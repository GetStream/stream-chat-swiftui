default_platform :ios
skip_docs

require 'json'
require 'net/http'
require 'xcodeproj'
import 'Sonarfile'
import 'Allurefile'

xcode_version = ENV['XCODE_VERSION'] || '15.0.1'
xcode_project = 'StreamChatSwiftUI.xcodeproj'
sdk_names = ['StreamChatSwiftUI']
github_repo = ENV['GITHUB_REPOSITORY'] || 'GetStream/stream-chat-swiftui'
derived_data_path = 'derived_data'
source_packages_path = 'spm_cache'
buildcache_xcargs = 'CC=clang CPLUSPLUS=clang++ LD=clang LDPLUSPLUS=clang++'
is_localhost = !is_ci
@force_check = false

before_all do |lane|
  if is_ci
    setup_ci
    ENV['FASTLANE_XCODEBUILD_SETTINGS_TIMEOUT'] = '180'
    ENV['FASTLANE_XCODEBUILD_SETTINGS_RETRIES'] = '10'
    xcversion(version: xcode_version) unless [:publish_release, :allure_launch, :pod_lint].include?(lane)
  end
end

after_all do |lane|
  stop_sinatra if lane == :test_e2e_mock
end

lane :build_xcframeworks do
  match_me
  output_directory = "#{Dir.pwd}/../Products"
  team_id = File.read('Matchfile').match(/team_id\("(.*)"\)/)[1]
  codesign = ["codesign --timestamp -v --sign 'Apple Distribution: Stream.io Inc (#{team_id})'"]
  sdk_names.each do |sdk|
    create_xcframework(
      project: xcode_project,
      scheme: sdk,
      destinations: ['iOS'],
      include_BCSymbolMaps: true,
      include_debug_symbols: true,
      xcframework_output_directory: output_directory,
      remove_xcarchives: true
    )
    sh('../Scripts/removeUnneededSymbols.sh', sdk, output_directory)
    codesign << lane_context[SharedValues::XCFRAMEWORK_OUTPUT_PATH]
  end
  sh(codesign.join(' ')) # We need to sign all frameworks at once
end

desc 'Release a new version'
lane :release do |options|
  previous_version_number = last_git_tag
  artifacts_path = File.absolute_path('../StreamChatSwiftUIArtifacts.json')
  swift_environment_path = File.absolute_path('../Sources/StreamChatSwiftUI/Generated/SystemEnvironment+Version.swift')
  extra_changes = lambda do |release_version|
    # Set the framework version on the artifacts
    artifacts = JSON.parse(File.read(artifacts_path))
    artifacts[release_version.to_s] = "https://github.com/#{github_repo}/releases/download/#{release_version}/StreamChatSwiftUI.zip"
    File.write(artifacts_path, JSON.dump(artifacts))

    # Set the framework version in SystemEnvironment+Version.swift
    new_content = File.read(swift_environment_path).gsub!(previous_version_number, release_version)
    File.open(swift_environment_path, 'w') { |f| f.puts(new_content) }
  end

  pod_lint
  version_number = release_ios_sdk(
    version: options[:version],
    bump_type: options[:type],
    sdk_names: sdk_names,
    podspec_names: ['StreamChatSwiftUI', 'StreamChatSwiftUI-XCFramework'],
    github_repo: github_repo,
    extra_changes: extra_changes
  )
  publish_release(version: version_number)
end

desc "Publish a new release to GitHub and CocoaPods"
lane :publish_release do |options|
  clean_products
  build_xcframeworks
  compress_frameworks
  clean_products

  publish_ios_sdk(
    version: options[:version],
    sdk_names: sdk_names,
    podspec_names: ['StreamChatSwiftUI', 'StreamChatSwiftUI-XCFramework'],
    github_repo: github_repo,
    upload_assets: ['Products/StreamChatSwiftUI.zip']
  )

  update_spm(version: options[:version])
end

private_lane :appstore_api_key do
  @appstore_api_key ||= app_store_connect_api_key(
    key_id: 'MT3PRT8TB7',
    issuer_id: '69a6de96-0738-47e3-e053-5b8c7c11a4d1',
    key_content: ENV.fetch('APPSTORE_API_KEY', nil),
    in_house: false
  )
end

lane :pod_lint do
  pod_lib_lint(podspec: 'StreamChatSwiftUI.podspec', allow_warnings: true)
end

desc "If `readonly: true` (by default), installs all Certs and Profiles necessary for development and ad-hoc.\nIf `readonly: false`, recreates all Profiles necessary for development and ad-hoc, updates them locally and remotely."
lane :match_me do |options|
  custom_match(
    api_key: appstore_api_key,
    app_identifier: ['io.getstream.iOS.DemoAppSwiftUI'],
    readonly: options[:readonly],
    register_device: options[:register_device]
  )
end

desc 'Runs tests in Debug config'
lane :test_ui do |options|
  next unless is_check_required(sources: sources_matrix[:ui], force_check: @force_check)

  remove_snapshots unless options[:record].to_s.empty?

  update_testplan_on_ci(path: 'StreamChatSwiftUITests/Tests/StreamChatSwiftUI.xctestplan')

  scan(
    project: xcode_project,
    scheme: 'StreamChatSwiftUI',
    testplan: 'StreamChatSwiftUI',
    configuration: 'Debug',
    clean: is_localhost,
    derived_data_path: derived_data_path,
    cloned_source_packages_path: source_packages_path,
    result_bundle: true,
    devices: options[:device],
    build_for_testing: options[:build_for_testing],
    skip_build: options[:skip_build],
    number_of_retries: options[:record].to_s.empty? ? 1 : nil,
    xcargs: buildcache_xcargs,
    fail_build: options[:record].to_s.empty?
  )

  if options[:record] && is_ci
    png_files = git_status(ext: '.png').map { |_, png| png }.flatten
    next if png_files.empty?

    title = "[CI] Snapshots"
    base = current_branch
    head = "#{base}-snapshots"
    sh("git checkout -b #{head}")
    png_files.each { |png| sh("git add #{png}") || true }
    sh("git commit -m '#{title}'")
    push_to_git_remote(tags: false)
    create_pull_request(
      api_token: ENV.fetch('GITHUB_TOKEN', nil),
      repo: github_repo,
      title: title,
      head: head,
      base: base,
      body: 'This PR was created automatically by CI.'
    )
  end
end

lane :build_test_app_and_frameworks do
  scan(
    project: xcode_project,
    scheme: 'StreamChatSwiftUITestsApp',
    testplan: 'StreamChatSwiftUITestsApp',
    result_bundle: true,
    derived_data_path: derived_data_path,
    cloned_source_packages_path: source_packages_path,
    clean: is_localhost,
    build_for_testing: true,
    xcargs: buildcache_xcargs
  )
end

desc 'Starts Sinatra web server'
lane :start_sinatra do
  sh('bundle exec ruby sinatra.rb > sinatra_log.txt 2>&1 &')
end

desc 'Stops Sinatra web server'
lane :stop_sinatra do
  sh('lsof -t -i:4567 | xargs kill -9')
end

desc 'Runs e2e ui tests using mock server in Debug config'
lane :test_e2e_mock do |options|
  next unless is_check_required(sources: sources_matrix[:e2e], force_check: @force_check)

  start_sinatra
  prepare_simulator(device: options[:device]) if is_ci

  scan_options = {
    project: xcode_project,
    scheme: 'StreamChatSwiftUITestsApp',
    testplan: 'StreamChatSwiftUITestsApp',
    result_bundle: true,
    derived_data_path: derived_data_path,
    cloned_source_packages_path: source_packages_path,
    clean: is_localhost,
    test_without_building: options[:test_without_building],
    xcargs: buildcache_xcargs,
    devices: options[:device],
    number_of_retries: 3 # TODO: CIS-1737
  }

  if is_localhost || options[:cron]
    scan(scan_options)
  else
    parallelize_tests_on_ci(scan: scan_options, batch: options[:batch])
  end
end

private_lane :parallelize_tests_on_ci do |options|
  products_dir = File.expand_path("../#{derived_data_path}/Build/Products")
  xctestrun = Dir.glob(File.expand_path("#{products_dir}/*.xctestrun")).first
  tests = retrieve_xctest_names(xctestrun: xctestrun).values.flatten
  slice_size = (tests.size / ENV['MATRIX_SIZE'].to_f).ceil
  only_testing = []
  tests.each_slice(slice_size) { |test| only_testing << test }
  only_testing_batch = only_testing[options[:batch].to_i]

  UI.success("Tests in total: #{only_testing.flatten.size}. Running #{only_testing_batch.size} of them ⌛️")
  scan(options[:scan].merge(only_testing: only_testing_batch))
end

desc 'Builds Demo app'
lane :build_demo do |options|
  next unless is_check_required(sources: sources_matrix[:sample_apps], force_check: @force_check)

  scan(
    project: xcode_project,
    scheme: 'DemoAppSwiftUI',
    clean: is_localhost,
    derived_data_path: derived_data_path,
    cloned_source_packages_path: source_packages_path,
    build_for_testing: true,
    devices: options[:device],
    xcargs: buildcache_xcargs
  )
end

desc 'Compresses the XCFrameworks into zip files'
lane :compress_frameworks do
  Dir.chdir('..') do
    FileUtils.cp('LICENSE', 'Products/LICENSE')
    Dir.chdir('Products') do
      sdk_names.each do |framework|
        sh("zip -r #{framework} ./#{framework}.xcframework ./LICENSE")
        sh("swift package compute-checksum #{framework}.zip")
      end
      sh('zip -r "StreamChat-All" ./*.xcframework ./LICENSE') if sdk_names.size > 1
    end
  end
end

desc 'Cleans Products and DerivedData folders'
lane :clean_products do
  Dir.chdir('..') do
    ['*.xcframework', '*.bundle', '*.BCSymbolMaps', '*.dSYMs', 'LICENSE'].each do |f|
      sh("rm -rf Products/#{f}")
    end
  end
end

desc 'Update XCFrameworks and submit to the SPM repository'
private_lane :update_spm do |options|
  version = options[:version] || ''
  UI.user_error!('You need to pass the version of the release you want to obtain the changelog from') unless version.length > 0

  # Generate Checksums
  stream_chat_swiftui_checksum = sh('swift package compute-checksum ../Products/StreamChatSwiftUI.zip').strip

  # Update SPM Repo
  spm_directory_name = 'StreamSPM'
  spm_directory = "../../#{spm_directory_name}"
  sh("git clone git@github.com:#{github_repo}-spm.git #{spm_directory}")

  Dir.chdir(spm_directory) do
    result = sh('basename `git rev-parse --show-toplevel`').strip
    UI.error("Not using #{spm_directory_name} repo") unless result.to_s == spm_directory_name

    file_lines = File.readlines('Package.swift')
    file_data = ''
    previous_module = ''

    file_lines.each do |line|
      formatted_line =
        case previous_module
        when "StreamChatSwiftUI"
          line.gsub(/(checksum: ")[a-z0-9]+(")/, "\\1#{stream_chat_swiftui_checksum}\\2")
        else
          line
        end

      url_pattern = %r{(releases/download/)[.0-9]+(/)}
      if line.match(url_pattern)
        formatted_line = line.gsub(url_pattern, "\\1#{version}\\2")
        previous_module = line.match(/([a-zA-Z]+).zip/).to_s.gsub(/.zip/, '')
      end

      file_data << formatted_line
    end

    # Write the new changes
    File.open('./Package.swift', 'w') { |file| file << file_data }

    # Update the repo
    sh('git add -A')
    sh("git commit -m 'Bump #{version}'")
    sh('git push')

    github_release = set_github_release(
      repository_name: "#{github_repo}-spm",
      api_token: ENV.fetch('GITHUB_TOKEN', nil),
      name: version,
      tag_name: version,
      commitish: 'main',
      description: "https://github.com/#{github_repo}/releases/tag/#{version}"
    )
    UI.success("New SPM release available: #{github_release['html_url']}")
  end

  # Clean Up
  sh("rm -rf #{spm_directory}")
end

private_lane :update_testplan_on_ci do |options|
  update_testplan(path: options[:path], env_vars: { key: 'CI', value: 'TRUE' }) if is_ci
end

desc 'Run fastlane linting'
lane :rubocop do
  next unless is_check_required(sources: sources_matrix[:ruby], force_check: @force_check)

  sh('bundle exec rubocop')
end

lane :install_sim do |options|
  xcode_install_cache_dir = File.expand_path('~/Library/Caches/XcodeInstall')
  sim_dmg_path = Dir["#{xcode_install_cache_dir}/*.dmg"].first
  sim_pkg_path = Dir["#{xcode_install_cache_dir}/*.pkg"].first
  if is_localhost || sim_dmg_path.nil? || sim_pkg_path.nil?
    sh("bundle exec xcversion simulators --install='iOS #{options[:ios]}'")
  else
    sh("hdiutil attach '#{sim_dmg_path}'")
    sh("sudo installer -pkg '#{sim_pkg_path}' -target /")
    mount_point = sh("hdiutil attach '#{sim_dmg_path}' | grep Volumes | cut -f 3").strip
    sh("hdiutil detach '#{mount_point}'")
  end
end

desc 'Remove UI Snapshots'
lane :remove_snapshots do |options|
  snapshots_path = "../StreamChatSwiftUITests/**/__Snapshots__/**/*.png"
  if options[:only_unchanged]
    pnf_files = git_status(ext: '.png')
    changed_snapshots = (pnf_files[:a] + pnf_files[:m]).map { |f| File.expand_path(f) }
    Dir.glob(snapshots_path).select { |f| File.delete(f) unless changed_snapshots.include?(File.expand_path(f)) }
  else
    Dir.glob(snapshots_path).select { |f| File.delete(f) }
  end
end

lane :sources_matrix do
  {
    e2e: ['Sources', 'StreamChatSwiftUITestsAppTests', 'StreamChatSwiftUITestsApp'],
    ui: ['Sources', 'StreamChatSwiftUITests', xcode_project],
    sample_apps: ['Sources', 'DemoAppSwiftUI', xcode_project],
    ruby: ['fastlane', 'Gemfile', 'Gemfile.lock']
  }
end

private_lane :current_branch do
  ENV['BRANCH_NAME'] || git_branch
end

private_lane :git_status do |options|
  UI.user_error!('Extension should be provided') unless options[:ext]

  untracked_files = sh('git status -s', log: false).split("\n").map(&:strip)
  UI.important("Git Status: #{untracked_files}")

  deleted_files = select_files_from(files: untracked_files, with_extension: options[:ext], that_start_with: 'D')
  added_files = select_files_from(files: untracked_files, with_extension: options[:ext], that_start_with: ['A', '??'])
  renamed_files = select_files_from(files: untracked_files, with_extension: options[:ext], that_start_with: 'R')
  modified_files = select_files_from(files: untracked_files, with_extension: options[:ext], that_start_with: 'M')

  renamed_files.each do |renamed_file|
    content = renamed_file.split.drop(1).join.split('->').map(&:strip)
    deleted_files << content.first
    added_files << content.last
  end
  { a: added_files, d: deleted_files, m: modified_files }
end

def select_files_from(files:, with_extension:, that_start_with:)
  files.select do |f|
    f.start_with?(*that_start_with)
  end.map do |f|
    f.split.drop(1).join(' ')
  end.select do |f|
    f.gsub(/['"]/, '').end_with?(with_extension)
  end
end
