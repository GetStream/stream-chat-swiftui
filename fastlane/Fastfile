default_platform :ios
skip_docs

require 'json'
require 'net/http'
require 'xcodeproj'
import 'Sonarfile'
import 'Allurefile'

xcode_version = ENV['XCODE_VERSION'] || '15.4'
xcode_project = 'StreamChatSwiftUI.xcodeproj'
sdk_names = ['StreamChatSwiftUI']
github_repo = ENV['GITHUB_REPOSITORY'] || 'GetStream/stream-chat-swiftui'
derived_data_path = 'derived_data'
source_packages_path = 'spm_cache'
metrics_git = 'git@github.com:GetStream/apple-internal-metrics.git'
sdk_size_path = "metrics/#{github_repo.split('/').last}-size.json"
buildcache_xcargs = 'CC=clang CPLUSPLUS=clang++ LD=clang LDPLUSPLUS=clang++'
is_localhost = !is_ci
project_package_resolved = "#{xcode_project}/project.xcworkspace/xcshareddata/swiftpm/Package.resolved"
@force_check = false

warning_status = '🟡' # Warning if a branch is #{max_tolerance} less performant than the benchmark
fail_status = '🔴' # Failure if a branch is more than #{max_tolerance} less performant than the benchmark
success_status = '🟢' # Success if a branch is more performant or equals to the benchmark
outstanding_status = '🚀' # Outstanding performance

before_all do |lane|
  if is_ci
    setup_ci
    xcversion(version: xcode_version) unless [:publish_release, :allure_launch, :allure_upload, :copyright, :pod_lint].include?(lane)
  end
end

after_all do |lane|
  stop_sinatra if lane == :test_e2e_mock
end

lane :build_xcframeworks do
  match_me
  output_directory = File.absolute_path("#{Dir.pwd}/../Products")
  team_id = File.read('Matchfile').match(/team_id\("(.*)"\)/)[1]
  codesign = ["codesign --timestamp -v --sign 'Apple Distribution: Stream.io Inc (#{team_id})'"]
  sdk_names.each do |sdk|
    create_xcframework(
      project: xcode_project,
      scheme: sdk,
      destinations: ['iOS'],
      include_BCSymbolMaps: true,
      include_debug_symbols: true,
      xcframework_output_directory: output_directory,
      remove_xcarchives: true
    )
    sh('../Scripts/removeUnneededSymbols.sh', sdk, output_directory)
    codesign << lane_context[SharedValues::XCFRAMEWORK_OUTPUT_PATH]
  end

  remove_stream_chat_module_shadow(output_directory: output_directory)
  sh(codesign.join(' ')) # We need to sign all frameworks at once
end

# Swift emits an invalid module interface when a public type has the same name as a module, see https://github.com/swiftlang/swift/issues/56573
private_lane :remove_stream_chat_module_shadow do |options|
  Dir.glob("#{options[:output_directory]}/**/*.swiftinterface") do |file|
    if File.file?(file)
      UI.important("Removing the StreamChat module's shadow at: #{file}...")
      File.write(file, File.read(file).gsub('StreamChat.', ''))
    end
  end
end

desc 'Release a new version'
lane :release do |options|
  previous_version_number = last_git_tag
  artifacts_path = File.absolute_path('../StreamChatSwiftUIArtifacts.json')
  swift_environment_path = File.absolute_path('../Sources/StreamChatSwiftUI/Generated/SystemEnvironment+Version.swift')
  extra_changes = lambda do |release_version|
    # Set the framework version on the artifacts
    artifacts = JSON.parse(File.read(artifacts_path))
    artifacts[release_version.to_s] = "https://github.com/#{github_repo}/releases/download/#{release_version}/StreamChatSwiftUI.zip"
    File.write(artifacts_path, JSON.dump(artifacts))

    # Set the framework version in SystemEnvironment+Version.swift
    new_content = File.read(swift_environment_path).gsub!(previous_version_number, release_version)
    File.open(swift_environment_path, 'w') { |f| f.puts(new_content) }

    # Update sdk sizes
    Dir.chdir('fastlane') { update_img_shields_sdk_sizes }
  end

  pod_lint
  release_ios_sdk(
    version: options[:version],
    bump_type: options[:type],
    sdk_names: sdk_names,
    podspec_names: ['StreamChatSwiftUI', 'StreamChatSwiftUI-XCFramework'],
    github_repo: github_repo,
    extra_changes: extra_changes,
    create_pull_request: true
  )
end

desc "Publish a new release to GitHub and CocoaPods"
lane :publish_release do |options|
  xcversion(version: '15.0.1')

  clean_products
  build_xcframeworks
  compress_frameworks
  clean_products

  publish_ios_sdk(
    skip_git_status_check: false,
    version: options[:version],
    sdk_names: sdk_names,
    podspec_names: ['StreamChatSwiftUI', 'StreamChatSwiftUI-XCFramework'],
    github_repo: github_repo,
    upload_assets: ['Products/StreamChatSwiftUI.zip']
  )

  update_spm(version: options[:version])

  merge_main_to_develop
end

lane :merge_release_to_main do
  ensure_git_status_clean
  sh('git checkout main')
  sh('git pull')

  # Grep all remote release branches and ensure there's only one
  release_branches = sh(command: 'git branch -a', log: false).delete(' ').split("\n").grep(%r(origin/.*release/))
  UI.user_error!("Expected 1 release branch, found #{release_branches.size}") if release_branches.size != 1

  # Merge release branch to main. For more info, read: https://notion.so/iOS-Branching-Strategy-37c10127dc26493e937769d44b1d6d9a
  sh("git merge #{release_branches.first} --ff-only")
  UI.user_error!('Not pushing changes') unless prompt(text: 'Will push changes. All looking good?', boolean: true)
  sh('git push')
  UI.important('Please, wait for the `Publish new release` workflow to pass on GitHub Actions: ' \
               "https://github.com/#{github_repo}/actions/workflows/publish-release.yml")
end

lane :merge_main_to_develop do
  if is_ci
    sh('git config --global user.name "Stream Bot"')
    sh('git reset --hard')
  else
    ensure_git_status_clean
  end

  sh('git checkout main')
  sh('git pull origin main')
  sh('git checkout origin/develop')
  sh('git pull origin develop')
  sh('git log develop..main')
  sh('git merge main')
  sh('git push origin develop')
end

private_lane :appstore_api_key do
  @appstore_api_key ||= app_store_connect_api_key(
    key_id: 'MT3PRT8TB7',
    issuer_id: '69a6de96-0738-47e3-e053-5b8c7c11a4d1',
    key_content: ENV.fetch('APPSTORE_API_KEY', nil),
    in_house: false
  )
end

lane :pod_lint do
  lint_required = true
  Dir.chdir('..') do
    sh("xcodebuild -resolvePackageDependencies -clonedSourcePackagesDirPath #{source_packages_path}")
    dependencies = JSON.parse(File.read(project_package_resolved))
    lint_required = dependencies['pins'].none? { |dependency| dependency['identity'] == 'stream-chat-swift' && dependency['state']['branch'] }
  end

  if lint_required
    pod_lib_lint(podspec: 'StreamChatSwiftUI.podspec', allow_warnings: true)
  else
    UI.important('Pod linting skipped: stream-chat-swift targets a development branch')
  end
end

desc "If `readonly: true` (by default), installs all Certs and Profiles necessary for development and ad-hoc.\nIf `readonly: false`, recreates all Profiles necessary for development and ad-hoc, updates them locally and remotely."
lane :match_me do |options|
  custom_match(
    api_key: appstore_api_key,
    app_identifier: ['io.getstream.iOS.DemoAppSwiftUI'],
    readonly: options[:readonly],
    register_device: options[:register_device]
  )
end

desc 'Runs tests in Debug config'
lane :test_ui do |options|
  next unless is_check_required(sources: sources_matrix[:ui], force_check: @force_check)

  record_mode = !options[:record].to_s.empty?
  remove_snapshots if record_mode

  update_testplan_on_ci(path: 'StreamChatSwiftUITests/Tests/StreamChatSwiftUI.xctestplan')

  scan(
    project: xcode_project,
    scheme: 'StreamChatSwiftUI',
    testplan: 'StreamChatSwiftUI',
    configuration: 'Debug',
    clean: is_localhost,
    derived_data_path: derived_data_path,
    cloned_source_packages_path: source_packages_path,
    result_bundle: true,
    devices: options[:device],
    build_for_testing: options[:build_for_testing],
    skip_build: options[:skip_build],
    number_of_retries: options[:record].to_s.empty? ? 1 : nil,
    xcargs: buildcache_xcargs,
    fail_build: !record_mode
  )

  if record_mode && is_ci
    png_files = git_status(ext: '.png').map { |_, png| png }.flatten
    next if png_files.empty?

    # Discard all files apart from the snapshots
    png_files.each { |png| sh("git add #{png}") || true }
    sh('git restore .')

    create_pr(
      title: '[CI] Snapshots',
      base_branch: current_branch,
      head_branch: "#{current_branch}-snapshots"
    )
  end
end

lane :build_test_app_and_frameworks do
  scan(
    project: xcode_project,
    scheme: 'StreamChatSwiftUITestsApp',
    testplan: 'StreamChatSwiftUITestsApp',
    result_bundle: true,
    derived_data_path: derived_data_path,
    cloned_source_packages_path: source_packages_path,
    clean: is_localhost,
    build_for_testing: true,
    xcargs: buildcache_xcargs
  )
end

desc 'Starts Sinatra web server'
lane :start_sinatra do
  sh('bundle exec ruby sinatra.rb > sinatra_log.txt 2>&1 &')
end

desc 'Stops Sinatra web server'
lane :stop_sinatra do
  sh('lsof -t -i:4567 | xargs kill -9')
end

desc 'Runs e2e ui tests using mock server in Debug config'
lane :test_e2e_mock do |options|
  next unless is_check_required(sources: sources_matrix[:e2e], force_check: @force_check)

  start_sinatra

  scan_options = {
    project: xcode_project,
    scheme: 'StreamChatSwiftUITestsApp',
    testplan: 'StreamChatSwiftUITestsApp',
    result_bundle: true,
    derived_data_path: derived_data_path,
    cloned_source_packages_path: source_packages_path,
    clean: is_localhost,
    test_without_building: options[:test_without_building],
    xcargs: buildcache_xcargs,
    devices: options[:device],
    prelaunch_simulator: is_ci,
    number_of_retries: 3
  }

  if is_localhost
    scan(scan_options)
  else
    parallelize_tests_on_ci(scan: scan_options, batch: options[:batch], cron: options[:cron])
  end
end

private_lane :parallelize_tests_on_ci do |options|
  products_dir = File.expand_path("../#{derived_data_path}/Build/Products")
  xctestrun = Dir.glob(File.expand_path("#{products_dir}/*.xctestrun")).first
  tests = retrieve_xctest_names(xctestrun: xctestrun).values.flatten
  slice_size = options[:cron] ? tests.size : (tests.size / ENV['MATRIX_SIZE'].to_f).ceil
  only_testing = []
  tests.each_slice(slice_size) { |test| only_testing << test }
  only_testing_batch = only_testing[options[:batch].to_i]

  begin
    UI.success("Tests in total: #{only_testing.flatten.size}. Running #{only_testing_batch.size} of them ⌛️")
    scan(options[:scan].merge(only_testing: only_testing_batch))
  rescue StandardError
    failed_tests = retreive_failed_tests
    UI.important("Re-running #{failed_tests.size} failed tests ⌛️")
    scan(options[:scan].merge(only_testing: failed_tests))
  end
end

private_lane :retreive_failed_tests do
  report_path = 'test_output/report.junit'
  raise UI.user_error!('There is no junit report to parse') unless File.file?(report_path)

  junit_report = Nokogiri::XML(File.read(report_path))
  failed_tests = []
  passed_tests = []
  suite_name = junit_report.xpath('//testsuite').first['name'].split('.').first
  junit_report.xpath('//testcase').each do |testcase|
    class_name = testcase['classname'].split('.').last
    test_name = testcase['name'].delete('()')

    if testcase.at_xpath('failure')
      failed_tests << "#{suite_name}/#{class_name}/#{test_name}"
    else
      passed_tests << "#{suite_name}/#{class_name}/#{test_name}"
    end
  end

  (failed_tests - passed_tests).uniq
end

desc 'Builds Demo app'
lane :build_demo do |options|
  next unless is_check_required(sources: sources_matrix[:sample_apps], force_check: @force_check)

  scan(
    project: xcode_project,
    scheme: 'DemoAppSwiftUI',
    clean: is_localhost,
    derived_data_path: derived_data_path,
    cloned_source_packages_path: source_packages_path,
    build_for_testing: true,
    devices: options[:device],
    xcargs: buildcache_xcargs
  )
end

desc 'Compresses the XCFrameworks into zip files'
lane :compress_frameworks do
  Dir.chdir('..') do
    FileUtils.cp('LICENSE', 'Products/LICENSE')
    Dir.chdir('Products') do
      sdk_names.each do |framework|
        sh("zip -r #{framework} ./#{framework}.xcframework ./LICENSE")
        sh("swift package compute-checksum #{framework}.zip")
      end
      sh('zip -r "StreamChat-All" ./*.xcframework ./LICENSE') if sdk_names.size > 1
    end
  end
end

desc 'Cleans Products and DerivedData folders'
lane :clean_products do
  Dir.chdir('..') do
    ['*.xcframework', '*.bundle', '*.BCSymbolMaps', '*.dSYMs', 'LICENSE'].each do |f|
      sh("rm -rf Products/#{f}")
    end
  end
end

desc 'Update XCFrameworks and submit to the SPM repository'
private_lane :update_spm do |options|
  version = options[:version] || ''
  UI.user_error!('You need to pass the version of the release you want to obtain the changelog from') unless version.length > 0

  # Generate Checksums
  stream_chat_swiftui_checksum = sh('swift package compute-checksum ../Products/StreamChatSwiftUI.zip').strip

  # Update SPM Repo
  spm_directory_name = 'StreamSPM'
  spm_directory = "../../#{spm_directory_name}"
  sh("git clone git@github.com:#{github_repo}-spm.git #{spm_directory}")

  Dir.chdir(spm_directory) do
    result = sh('basename `git rev-parse --show-toplevel`').strip
    UI.error("Not using #{spm_directory_name} repo") unless result.to_s == spm_directory_name

    file_lines = File.readlines('Package.swift')
    file_data = ''
    previous_module = ''

    file_lines.each do |line|
      formatted_line =
        case previous_module
        when "StreamChatSwiftUI"
          line.gsub(/(checksum: ")[a-z0-9]+(")/, "\\1#{stream_chat_swiftui_checksum}\\2")
        else
          line
        end

      url_pattern = %r{(releases/download/)[.0-9]+(/)}
      if line.match(url_pattern)
        formatted_line = line.gsub(url_pattern, "\\1#{version}\\2")
        previous_module = line.match(/([a-zA-Z]+).zip/).to_s.gsub(/.zip/, '')
      end

      file_data << formatted_line
    end

    # Write the new changes
    File.open('./Package.swift', 'w') { |file| file << file_data }

    # Update the repo
    sh('git config --global user.name "Stream Bot"')
    sh('git add -A')
    sh("git commit -m 'Bump #{version}'")
    sh('git push')

    github_release = set_github_release(
      repository_name: "#{github_repo}-spm",
      api_token: ENV.fetch('GITHUB_TOKEN', nil),
      name: version,
      tag_name: version,
      commitish: 'main',
      description: "https://github.com/#{github_repo}/releases/tag/#{version}"
    )
    UI.success("New SPM release available: #{github_release['html_url']}")
  end

  # Clean Up
  sh("rm -rf #{spm_directory}")
end

private_lane :update_testplan_on_ci do |options|
  update_testplan(path: options[:path], env_vars: { key: 'CI', value: 'TRUE' }) if is_ci
end

desc 'Run fastlane linting'
lane :rubocop do
  next unless is_check_required(sources: sources_matrix[:ruby], force_check: @force_check)

  sh('bundle exec rubocop')
end

lane :install_runtime do |options|
  runtimes = `xcrun simctl runtime list -j`
  UI.message("👉 Runtime list:\n#{runtimes}")
  simulators = JSON.parse(runtimes).select do |_, sim|
    sim['platformIdentifier'].end_with?('iphonesimulator') && sim['version'] == options[:ios] && sim['state'] == 'Ready'
  end

  if simulators.empty?
    Dir.chdir('..') do
      sh("echo 'iOS #{options[:ios]} Simulator' | ipsw download xcode --sim") if Dir['*.dmg'].first.nil?
      sh("./Scripts/install_ios_runtime.sh #{Dir['*.dmg'].first}")
      UI.success("iOS #{options[:ios]} Runtime successfuly installed")
    end
  else
    UI.important("iOS #{options[:ios]} Runtime already exists")
  end
end

desc 'Remove UI Snapshots'
lane :remove_snapshots do |options|
  snapshots_path = "../StreamChatSwiftUITests/**/__Snapshots__/**/*.png"
  if options[:only_unchanged]
    pnf_files = git_status(ext: '.png')
    changed_snapshots = (pnf_files[:a] + pnf_files[:m]).map { |f| File.expand_path(f) }
    Dir.glob(snapshots_path).select { |f| File.delete(f) unless changed_snapshots.include?(File.expand_path(f)) }
  else
    Dir.glob(snapshots_path).select { |f| File.delete(f) }
  end
end

lane :sources_matrix do
  {
    e2e: ['Sources', 'StreamChatSwiftUITestsAppTests', 'StreamChatSwiftUITestsApp'],
    ui: ['Sources', 'StreamChatSwiftUITests', xcode_project],
    sample_apps: ['Sources', 'DemoAppSwiftUI', xcode_project],
    ruby: ['fastlane', 'Gemfile', 'Gemfile.lock'],
    size: ['Sources', xcode_project],
    sonar: ['Sources']
  }
end

lane :copyright do
  update_copyright(ignore: [derived_data_path, source_packages_path, 'vendor/'])
  next unless is_ci

  create_pr(
    title: '[CI] Update Copyright',
    head_branch: "ci/update-copyright-#{Time.now.to_i}"
  )
end

desc 'Show current frameworks size'
lane :show_frameworks_sizes do |options|
  next unless is_check_required(sources: sources_matrix[:size], force_check: @force_check)

  ['metrics/'].each { |dir| FileUtils.remove_dir(dir, force: true) }

  sh("git clone #{metrics_git} #{File.dirname(sdk_size_path)}")
  is_release = current_branch.include?('release/')
  benchmark_config = JSON.parse(File.read(sdk_size_path))
  benchmark_key = is_release ? 'release' : 'develop'
  benchmark_sizes = benchmark_config[benchmark_key]
  branch_sizes = options[:sizes] || frameworks_sizes

  table_header = '## SDK Size'
  markdown_table = "#{table_header}\n| `title` | `#{is_release ? 'previous release' : 'develop'}` | `#{is_release ? 'current release' : 'branch'}` | `diff` | `status` |\n| - | - | - | - | - |\n"
  sdk_names.each do |title|
    benchmark_value = benchmark_sizes[title]
    branch_value = branch_sizes[title.to_sym]
    max_tolerance = 0.5 # Max Tolerance is 0.5MB
    fine_tolerance = 0.25 # Fine Tolerance is 0.25MB

    diff = (branch_value - benchmark_value).round(2)

    status_emoji =
      if diff < 0
        outstanding_status
      elsif diff >= max_tolerance
        fail_status
      elsif diff >= fine_tolerance
        warning_status
      else
        success_status
      end

    markdown_table << "|#{title}|#{benchmark_value}MB|#{branch_value}MB|#{diff}MB|#{status_emoji}|\n"
  end

  FastlaneCore::PrintTable.print_values(title: 'Benchmark', config: benchmark_sizes)
  FastlaneCore::PrintTable.print_values(title: 'SDK Size', config: branch_sizes)

  if is_ci
    if is_release || ENV['GITHUB_EVENT_NAME'].to_s == 'push'
      benchmark_config[benchmark_key] = branch_sizes
      File.write(sdk_size_path, JSON.pretty_generate(benchmark_config))
      Dir.chdir(File.dirname(sdk_size_path)) do
        if sh('git status -s', log: false).to_s.empty?
          UI.important('No changes in SDK sizes benchmarks.')
        else
          sh('git add -A')
          sh("git commit -m 'Update #{sdk_size_path}'")
          sh('git push')
        end
      end
    end

    create_pr_comment(pr_num: ENV.fetch('GITHUB_PR_NUM'), text: markdown_table, edit_last_comment_with_text: table_header)
  end

  UI.user_error!("#{table_header} benchmark failed.") if markdown_table.include?(fail_status)
end

desc 'Update img shields SDK size labels'
lane :update_img_shields_sdk_sizes do
  sizes = frameworks_sizes

  # Read the file into a string
  readme_path = '../README.md'
  readme_content = File.read(readme_path)

  # Define the new value for the badge
  stream_chat_swiftui_size = "#{sizes[:StreamChatSwiftUI]}MB"

  # Replace the value in the badge URL
  readme_content.gsub!(%r{(https://img.shields.io/badge/StreamChatSwiftUI-)(.*?)(-blue)}, "\\1#{stream_chat_swiftui_size}\\3")

  # Write the updated content back to the file
  File.write(readme_path, readme_content)

  # Notify success
  UI.success('Successfully updated the SDK size labels in README.md!')
end

def frameworks_sizes
  root_dir = 'Build/SDKSize'
  archive_dir = "#{root_dir}/DemoApp.xcarchive"

  FileUtils.rm_rf("../#{root_dir}/")

  match_me

  gym(
    scheme: 'DemoAppSwiftUI',
    archive_path: archive_dir,
    export_method: 'ad-hoc',
    export_options: 'fastlane/sdk_size_export_options.plist'
  )

  # Parse the thinned size of Assets.car from Packaging.log
  assets_size_regex = %r{\b(\d+)\sbytes\sfor\s./Payload/DemoAppSwiftUI.app/Frameworks/StreamChatSwiftUI.framework/Assets.car\b}
  packaging_log_content = File.read("#{Gym.cache[:temporary_output_path]}/Packaging.log")
  match = packaging_log_content.match(assets_size_regex)
  assets_thinned_size = match[1].to_i

  frameworks_path = "../#{archive_dir}/Products/Applications/DemoAppSwiftUI.app/Frameworks"
  stream_chat_swiftui_size = File.size("#{frameworks_path}/StreamChatSwiftUI.framework/StreamChatSwiftUI")
  stream_chat_swiftui_size_mb = ((stream_chat_swiftui_size + assets_thinned_size).to_f / 1024 / 1024).round(2)

  {
    StreamChatSwiftUI: stream_chat_swiftui_size_mb
  }
end

private_lane :create_pr do |options|
  options[:base_branch] ||= 'develop'
  sh("git checkout -b #{options[:head_branch]}")
  sh('git add -A')
  sh("git commit -m '#{options[:title]}'")
  push_to_git_remote(tags: false)

  create_pull_request(
    api_token: ENV.fetch('GITHUB_TOKEN', nil),
    repo: github_repo,
    title: options[:title],
    head: options[:head_branch],
    base: options[:base_branch],
    body: 'This PR was created automatically by CI.'
  )
end

private_lane :create_pr_comment do |options|
  if is_ci && !options[:pr_num].to_s.empty?
    last_comment = sh("gh pr view #{options[:pr_num]} --json comments --jq '.comments | map(select(.author.login == \"Stream-iOS-Bot\")) | last'")
    edit_last_comment = last_comment.include?(options[:edit_last_comment_with_text]) ? '--edit-last' : ''
    sh("gh pr comment #{options[:pr_num]} #{edit_last_comment} -b '#{options[:text]}'")
  end
end

lane :current_branch do
  branch = if ENV['GITHUB_PR_NUM'].to_s.empty?
             git_branch
           else
             sh("gh pr view #{ENV.fetch('GITHUB_PR_NUM')} --json headRefName -q .headRefName").strip
           end

  UI.important("Current branch: #{branch} 🕊️")
  branch
end

private_lane :git_status do |options|
  UI.user_error!('Extension should be provided') unless options[:ext]

  untracked_files = sh('git status -s', log: false).split("\n").map(&:strip)
  UI.important("Git Status: #{untracked_files}")

  deleted_files = select_files_from(files: untracked_files, with_extension: options[:ext], that_start_with: 'D')
  added_files = select_files_from(files: untracked_files, with_extension: options[:ext], that_start_with: ['A', '??'])
  renamed_files = select_files_from(files: untracked_files, with_extension: options[:ext], that_start_with: 'R')
  modified_files = select_files_from(files: untracked_files, with_extension: options[:ext], that_start_with: 'M')

  renamed_files.each do |renamed_file|
    content = renamed_file.split.drop(1).join.split('->').map(&:strip)
    deleted_files << content.first
    added_files << content.last
  end
  { a: added_files, d: deleted_files, m: modified_files }
end

def select_files_from(files:, with_extension:, that_start_with:)
  files.select do |f|
    f.start_with?(*that_start_with)
  end.map do |f|
    f.split.drop(1).join(' ')
  end.select do |f|
    f.gsub(/['"]/, '').end_with?(with_extension)
  end
end
